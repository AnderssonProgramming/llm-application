package edu.study.llm_application.infrastructure.adapters.llm;

import edu.study.llm_application.domain.entities.LlmRequest;
import edu.study.llm_application.domain.entities.LlmResponse;
import edu.study.llm_application.domain.ports.out.LlmProviderPort;
import lombok.extern.slf4j.Slf4j;
import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
import org.springframework.stereotype.Component;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.Random;

/**
 * Mock implementation of LLM provider for testing and development
 */
@Slf4j
@Component
@ConditionalOnProperty(name = "openai.mock.enabled", havingValue = "true", matchIfMissing = true)
public class MockLlmAdapter implements LlmProviderPort {
    
    private final Random random = new Random();
    
    private static final String[] MOCK_MODELS = {
        "mock-gpt-3.5-turbo",
        "mock-gpt-4",
        "mock-claude-3-sonnet",
        "mock-llama-2-70b"
    };
    
    private static final List<String> SAMPLE_RESPONSES = Arrays.asList(
        "This is a mock response from the LLM. In a real implementation, this would be generated by an actual language model.",
        "Artificial Intelligence (AI) refers to the simulation of human intelligence in machines that are programmed to think and learn like humans.",
        "Machine Learning is a subset of artificial intelligence that provides systems the ability to automatically learn and improve from experience.",
        "Natural Language Processing (NLP) is a branch of AI that helps computers understand, interpret and manipulate human language.",
        "Deep Learning is a subset of machine learning that uses neural networks with three or more layers to simulate the behavior of the human brain.",
        "The future of AI looks promising with advancements in areas like computer vision, robotics, and autonomous systems."
    );
    
    @Override
    public LlmResponse generateResponse(LlmRequest request) throws LlmProviderException {
        log.info("Mock LLM Provider: Processing request for model: {}", request.getModel());
        
        try {
            // Simulate processing time
            Thread.sleep(500 + random.nextInt(1500)); // 0.5-2 seconds
            
            // Simulate occasional failures (10% chance)
            if (random.nextInt(10) == 0) {
                throw new LlmProviderException("Mock provider: Simulated random failure");
            }
            
            // Generate mock response
            String mockContent = generateMockContent(request.getPrompt());
            Integer mockTokens = mockContent.split("\\s+").length + random.nextInt(50);
            
            return LlmResponse.builder()
                    .requestId(request.getId())
                    .content(mockContent)
                    .model(request.getModel())
                    .tokensUsed(mockTokens)
                    .timestamp(LocalDateTime.now())
                    .status("SUCCESS")
                    .build();
                    
        } catch (InterruptedException e) {
            Thread.currentThread().interrupt();
            throw new LlmProviderException("Mock provider: Request interrupted", e);
        }
    }
    
    @Override
    public boolean isHealthy() {
        log.debug("Mock LLM Provider: Health check - always healthy");
        return true;
    }
    
    @Override
    public String[] getSupportedModels() {
        log.debug("Mock LLM Provider: Returning supported models");
        return MOCK_MODELS.clone();
    }
    
    @Override
    public String getProviderName() {
        return "Mock LLM Provider";
    }
    
    /**
     * Generates a mock response based on the input prompt
     */
    private String generateMockContent(String prompt) {
        // Try to generate contextually relevant responses
        String lowerPrompt = prompt.toLowerCase();
        
        if (lowerPrompt.contains("ai") || lowerPrompt.contains("artificial intelligence")) {
            return SAMPLE_RESPONSES.get(1);
        } else if (lowerPrompt.contains("machine learning") || lowerPrompt.contains("ml")) {
            return SAMPLE_RESPONSES.get(2);
        } else if (lowerPrompt.contains("nlp") || lowerPrompt.contains("natural language")) {
            return SAMPLE_RESPONSES.get(3);
        } else if (lowerPrompt.contains("deep learning") || lowerPrompt.contains("neural")) {
            return SAMPLE_RESPONSES.get(4);
        } else if (lowerPrompt.contains("future") || lowerPrompt.contains("trend")) {
            return SAMPLE_RESPONSES.get(5);
        } else {
            // Return a random response for other prompts
            return SAMPLE_RESPONSES.get(random.nextInt(SAMPLE_RESPONSES.size()));
        }
    }
}
